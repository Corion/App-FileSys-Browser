#!/usr/bin/perl
use strict;
use warnings;

use Mojolicious::Lite;
use File::Basename 'dirname';

use lib 'lib';

use 5.020; # for signatures
use experimental 'signatures';
use Encode 'encode', 'decode';

use Mojo::URL;
use Mojo::File 'path';
use Mojolicious::Sessions;

use lib '../Filesys-DB/lib';
use Filesys::DB;
use Filesys::DB::Collection;
use DBD::SQLite::Constants ':file_open';
use PerlX::Maybe;
use Carp 'croak';

use lib '../App-sqldisplay/lib';
use lib '/home/corion/repos/App-sqldisplay/lib';
use App::sqldisplay;

#use MojoX::ChangeNotify;
package MojoX::ChangeNotify {
    use strict;
    use warnings;

    use File::ChangeNotify;
    use File::ChangeNotify::Event;
    use Mojo::IOLoop::Subprocess;
    use Mojo::Base 'Mojo::EventEmitter';

    use 5.020; # for signatures
    use feature 'signatures';
    no warnings 'experimental::signatures';

    has 'child';

    sub instantiate_watcher($self, %options) {
        my $subprocess = Mojo::IOLoop::Subprocess->new();
        $self->child( $subprocess );

        $subprocess->on('progress' => sub( $subprocess, @events ) {
            # Emit "changed" events

            for my $ev (@events) {
                delete $ev->{attributes} unless $ev->{has_attributes};
                delete $ev->{content} unless $ev->{has_content};

                $self->emit( $ev->{type}, File::ChangeNotify::Event->new( $ev ));
            };
        });

        # Operation that would block the event loop for 5 seconds (with promise)
        $subprocess->run_p(sub($subprocess) {
            my $watcher = File::ChangeNotify->instantiate_watcher( %options );
            while( my @events = $watcher->wait_for_events()) {
                #warn sprintf "Child got '%s'", $events[0]->type;

                @events = map {
                    +{ type           => $_->type,
                       path           => $_->path,
                       attributes     => $_->attributes,
                       has_attributes => $_->has_attributes,
                       content        => $_->content,
                       has_content    => $_->has_content,
                    },
                } @events;

                $subprocess->progress( @events );
            };
        })->catch(sub  {
            my $err = shift;
            say "Subprocess error: $err";
        });
    };

    # emits "changed"

};

use Getopt::Long ':config', 'pass_through';
GetOptions(
);

my @args = @ARGV;

my $watcher = MojoX::ChangeNotify->new();

$ENV{MOJO_HOME} //= path($ENV{MOJO_EXE})->dirname->to_abs->to_string;

my $app_path = path($ENV{MOJO_EXE})->dirname->to_abs->to_string;
my $app_file = path($ENV{MOJO_EXE})->to_abs->to_string;
my $library_path = path($ENV{MOJO_EXE})->dirname->sibling('lib')->to_abs->to_string;
$watcher->instantiate_watcher(
    directories => [
        $app_path,
        $library_path,
        "$ENV{MOJO_HOME}/templates",
        "$ENV{MOJO_HOME}/public"
    ],
);

my $last_id = 1;
my %clients;
my $app_version = $$; # not great, but good enough until we exec() for restarting
say "App version: $app_version";

sub add_client( $client ) {
    # It seems that we need some kind of PING / PONG here
    #state $heartbeat = Mojo::IOLoop->timer( 10 => sub($t) {
    #    for my $c (values %clients) {
    #        use Mojo::WebSocket qw(WS_PING);
    #        local $| = 1;
    #        #print "\rPING\r";
    #        $client->send([1, 0, 0, 0, WS_PING, '']);
    #    };
    #});
    $client = $client->inactivity_timeout(3600);
    my $client_version = $client->param('version');

    my $id = $last_id++;
    my $clients = \%clients;
    $clients->{ $id } = $client->tx;
    $client->on(finish => sub( $c, @rest ) {
        say "Client $id went away";
        delete $clients->{ $id };
    });

    $client->on('json' => sub ($c, $msg) {
        if( $client_version != $app_version ) {
            say "Client needs reload, trying to force a reload";
            # We should note when we have upgraded the client

            # We should re-use the cookie of the client (if we have one)
            my $url = Mojo::URL->new( $msg->{url} );
            my $this = $c->req->url;
            $this->path_query( $url->path_query );
            my $dom = $c->ua->get($this)->result;
            my $html = $dom->content->asset->slurp;
            $html =~ s!^.*?(<body\b.*</body>)!$1!sm;

            say "Sending new HTML";
            $client->send( { text => "$html" });
            #$c->reply(text => $html);
        };

    });

    #say "Added client $id as WS client";
    $id;
}

sub notify_client( $client_id, @actions ) {
    say "Notifying $client_id";
    my $client = $clients{ $client_id };
    for my $action (@actions) {
        $client->send($action);
    };
}

sub notify_clients( @actions ) {
    my $clients = \%clients;
    for my $client_id (sort keys %$clients ) {
        notify_client( $client_id, @actions );
    };
}

sub restart_server() {
    # Get a new PID for us
    if( 0 == fork ) {
        say "New PID: $$";
        while( 1 ) {
            if(! exec $0 => @ARGV ) {
                say "Error respawning, sleeping for 10 seconds";
                sleep 10;
            };
        };
    } else {
        exit;
    };
}

sub file_changed( $self, $ev ) {
    say "Modified: $ev->{path}";

    my $dirty;

    if( $ev->path eq $app_file ) {
        # reload ourselves
        say "Reloading $0";
        $dirty = 1;
        restart_server();

    } elsif( $ev->path =~ m!^\Q$library_path\b! ) {
        # reload ourselves
        say "Reloading libraries for $0";
        $dirty = 1;
        restart_server();

    } elsif( dirname($ev->path) =~ /\btemplates$/ and $ev->path =~ /\.(?:html|css|js)(?:\.ep)?$/) {
        say "Reloading templates";
        app->renderer->cache( Mojo::Cache->new ); # boom
        $dirty = 1;

    } else {
        # maybe some other input data changed, so we can merely update the page?!
    };

    if( $dirty ) {
        say "Force-reloading the client";
        my $html = q{<script id="server_script">window.location.reload()</script>};
        notify_clients($html);
    };
};
$watcher->on('create' => \&file_changed);
$watcher->on('modify' => \&file_changed);

websocket '/notify' => sub($c) {
    my $client_id = add_client( $c );

    # Just in case an old client reconnects
    # Maybe that client could tell us what version it has so we don't render
    # this page twice?! Also, what tab it has?!
    # Also, when restarting ourselves, $$ does not change, need to fix
    if( $c->param('version') != $app_version ) {
        say sprintf "Updating client page (%d => %d)", $c->param('version'), $app_version;
        #render_index($c);
        #my $html = $c->render_to_string('index');
        my $html = q{<body><script>windows.location.reload()</script></body>};
        # Maybe we can query the client where they are right now?!
        notify_client( $client_id => $html );
    };
};

# User authentification

{
   my %db = (
      foo => {pass => 'FOO', name => 'Foo De Pois'},
      bar => {pass => 'BAZ', name => 'Bar Auangle'},
   );
   sub load_account ($u) { return $db{$u} // undef }
   sub validate ($u, $p) {
      warn "user<$u> pass<$p>\n";
      my $account = load_account($u) or return;
      return $account->{pass} eq $p;
   }
}

app->plugin(
   Authentication => {
      load_user     => sub ($app, $uid) { load_account($uid) },
      validate_user => sub ($c, $u, $p, $e) { validate($u, $p) ? $u : () },
   }
);

my $session_store = Mojolicious::Sessions->new();
$session_store->default_expiration(0); # cookies are forever

app->hook(
    before_render => sub ($c, $args) {
        if( $c->is_user_authenticated ) {
say "User is authenticated";
        } else {
say "Need login";
        };
        my $user = $c->is_user_authenticated ? $c->current_user : undef;
        $c->stash(user => $user);
        return $c;
    }
);

get '/login' => sub ($c) { $c->render(template => 'login') };
post '/login' => sub ($c) {
    my $username = $c->param('username');
    my $password = $c->param('password');
    if ($c->authenticate($username, $password)) {
        warn $c->is_user_authenticated ? 'YES' : 'NOT YET';
        my $next = $c->session('return_to') // '/media';
        $c->redirect_to($next);
    }
    else {
        $c->redirect_to($c->req->url->to_abs);
    }
    return;
};

post '/logout' => sub ($c) {
    $c->logout if $c->is_user_authenticated;
    return $c->redirect_to('/');
};


get '/' => sub( $c ) {
    return login_detour($c) unless $c->is_user_authenticated;
    $c->redirect_to('media');
};

# Serve precompressed assets
get '/htmx.2.0.1.min.js' => sub($c) {
    my $fn = "htmx.2.0.1.min.js";
    my $base = "$ENV{MOJO_HOME}/public";
    my $file = "$base/$fn";
    my $gzipped = "$file.gz";
    if( -e "$gzipped" ) {
        $file = $gzipped;
        $c->res->headers->content_encoding('gzip');
    };
    my $ct = app->types->type("js");
    $c->res->headers->content_type($ct);
    $c->reply->file($file);
    return 200;
};

my ($dbpath) = grep { -f $_ }
               '/home/corion/bin/Filesys-DB/db/filesys-db.sqlite',
               '/var/run/user/1000/gvfs/smb-share:server=dune,share=corion/bin/Filesys-DB/db/filesys-db.sqlite',
            ;
my ($base) = grep { -d $_ }
               '/home/media/mp3/',
               '/var/run/user/1000/gvfs/smb-share:server=dune,share=media/mp3/',
            ;

my $filesystem = Filesys::DB->new(
    dbh => {
        dsn  => "dbi:SQLite:dbname=$dbpath",
        options => {
            sqlite_open_flags => SQLITE_OPEN_READONLY(),
            RaiseError => 1,
            PrintError => 0,
        },
    }
);
$filesystem->init_config(
    default_config_file => '../Filesys-DB/filesys-db.yaml',
);

sub get_recent( $count=20, $offset=0) {
    #say "Fetching from DB";
    my $items = $filesystem->selectall_named( <<'SQL', $count, $offset );
    with latest_changed_audio_directories as (
        select c.collection_id
             , c.parent_id
             , c.title
             , max(e.mtime) as last_update
          FROM filesystem_membership m
          join filesystem_collection c on m.collection_id=c.collection_id
          join filesystem_entry e on m.entry_id=e.entry_id
         where e.mime_type like 'audio/%'
           and c.collection_type = 'directory'
      group by c.title, c.parent_id, c.collection_id
      order by last_update desc
         limit $count
        offset $offset
    )
    select distinct c.collection_id
         , c.collection_json
      from latest_changed_audio_directories latest
      join filesystem_collection c on latest.collection_id = c.collection_id
    order by c.collection_id desc
SQL

    #say "Inflating";
    my @res = map {
        Filesys::DB::Collection->from_row( $filesystem, $_ );
    } $items->@*;
    #say "Done";
    return \@res
}

sub fetch_album( $artist, $name ) {
    my $filename;
    $filename = "%/$artist/$name%";

    # Find the album by title/artist instead of hardcoding a filename

    # Fetch the collection id
    my $album = $filesystem->selectall_named(<<'SQL', $filename );
        select distinct
               c.collection_id
          FROM filesystem_membership m
          join filesystem_collection c on m.collection_id=c.collection_id
          join filesystem_entry e on m.entry_id=e.entry_id
         where e.mime_type like 'audio/%'
           and c.collection_type = 'directory'
           and e.filename like $filename
           and e.filename like '%.mp3'
SQL
    return fetch_playlist( $album->[0]->{collection_id});
}

sub fetch_playlist( $id ) {
    my $res = Filesys::DB::Collection->from_id( $filesystem, 0+$id );
    if( $res->image ) {
        $res->{image} = $res->fetch_image( $filesystem );
    }

    my $art = $res->image;
    $res->items->@* = grep {
                ( !$art or ($_->{entry_id} != $art->entry_id) )
            and $_->{mime_type} ne 'audio/x-mpegurl'
    } $res->items->@*;

    $res
}

sub as_videojs_playlist($collection, $base) {
    my $art = $collection->image;
    my @art = defined $art ?
      ( poster => "/media/image/". Mojo::File->new( $art->{ filename }->native )->to_rel( $base ))
    : ();
    my $art_id = $art->{entry_id} // 0;
    return [
        map {
            my $track = $_;
            +{
                title => $track->{content}->{title},
                artist => $track->{content}->{artist},
                album  => $track->{content}->{album},
                sources => [
                        +{
                            type => 'audio/mpeg',
                        , src => "/media/asset/" . Mojo::File->new( $track->{ filename }->native)->to_rel($base)
                        }
                ],
                @art
            },
        } grep {
                $_->{entry_id} != $art_id
            and $_->{mime_type} ne 'audio/x-mpegurl'
            and $_->{mime_type} ne 'image/jpeg'
        } $collection->items->@*
    ];
}

sub login_detour( $c ) {
    # Somehow save the request parameters in the session
    # This once more means we really need a local (in-memory if need be) session module
    # for Mojolicious
    $c->session( return_to => $c->req->url->to_abs );
    return $c->redirect_to('/login');
}

get '/media' => sub( $c ) {
    return login_detour($c) unless $c->is_user_authenticated;

    my $offset = $c->param('offset') // 0;
    my $count = $c->param('count') // 20;
    my $albums = get_recent($count, $offset);
    for my $album ($albums->@*) {
        if( $album->image ) {
            $album->{image} = $album->fetch_image( $filesystem );
        }
    };
    $c->stash( albums => $albums );
    $c->stash( base   => $base );
    $c->stash( offset => $offset );
    $c->render('media')
};

get '/media/album_grid' => sub( $c ) {
    return $c->redirect_to('/login') unless $c->is_user_authenticated;

    # Redirect to /media if not hx-request
    my $offset = $c->param('offset') // 0;
    my $count = $c->param('count') // 20;
    my $direction = $c->param('direction');
    my $albums = get_recent($count, $offset);
    for my $album ($albums->@*) {
        if( $album->image and ! ref $album->image ) {
            $album->{image} = $album->fetch_image( $filesystem );
        }
    };
    $c->stash( albums => $albums );
    $c->stash( base   => $base );
    $c->stash( offset => $offset );
    $c->stash( direction => $direction );
    # Also, replace the URL we currently have, to reduce page size on navigation/reload
    $c->res->headers->add( 'HX-Replace-URL' => "/media?offset=$offset&count=$count");
    $c->render('album_grid')
};

get '/media/diagnostics' => sub( $c ) {
    return $c->redirect_to('/login') unless $c->is_user_authenticated;

    # rerun all queries
    my $diagnostics = App::sqldisplay->new(
        dbh         => $filesystem->dbh,
        config_file => 'scripts/media-diagnostics.yaml',
        spreadsheet_file => undef,
    );
    $diagnostics->load_config();
    my @results = $diagnostics->run_queries( $diagnostics->queries->@* );
    $c->stash( results => \@results );
    $c->render('diagnostics')
};

get '/media/playlist/<id:num>.json' => sub( $c ) {
    return $c->redirect_to('/login') unless $c->is_user_authenticated;

    # Find album ...
    my $tracks = fetch_playlist( $c->param('id'));
    $c->render(json => as_videojs_playlist( $tracks, $base ))
};

get '/media/playlist/<id:num>' => sub( $c ) {
    return $c->redirect_to('/login') unless $c->is_user_authenticated;

    # Find album ...
    my $album = fetch_playlist( $c->param('id'));
    $c->stash( offset => $c->param('offset') // 0 );
    $c->stash( base   => $base );
    $c->stash( tracks => $album );
    $c->render('playlist')
};

get '/media/image/*image' => sub( $c ) {
    return $c->redirect_to('/login') unless $c->is_user_authenticated;

    my $filename = $c->param('image');
    $filename =~ s![\\/]\.\.(?=[\\/])!/!g;
    $filename =~ s/&amp;/&/g;
    $filename = decode('UTF-8', $filename );
    my $fn = Mojo::File->new( $base, $filename );
    say "Sending [$fn]";
    $c->reply->asset(Mojo::Asset::File->new(path => $fn));
};

get '/media/asset/*asset' => sub( $c ) {
    return $c->redirect_to('/login') unless $c->is_user_authenticated;

    my $filename = $c->param('asset');
    $filename =~ s![\\/]\.\.(?=[\\/])!/!g;
    $filename =~ s/&amp;/&/g;
    $filename = decode('UTF-8', $filename );
    my $fn = Mojo::File->new( $base, $filename );
    say "Sending [$fn]";
    $c->reply->asset(Mojo::Asset::File->new(path => $fn));
    if( $fn =~ /\.m3u8\z/ ) {
        $c->res->headers->content_type('application/x-mpegurl');
    };
};

app->start;
