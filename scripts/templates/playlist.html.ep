<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta htmx.config.allowScriptTags="true">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="/bootstrap.5.3.3.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<title><%= $tracks->{title} %></title>
<!-- <link rel="stylesheet" src="./boostrap.5.3.3.min.css" /> -->
<script src="/htmx.2.0.1.min.js"></script>
<script src="/ws.2.0.1.js"></script>
<script src="/debug.2.0.1.js"></script>
<script src="/loading-states.2.0.1.js"></script>
<script src="/morphdom.2.7.4.js"></script>
<script src="/video.8.17.2.min.js"></script>
<script src="/videojs-playlist.5.1.2.min.js"></script>
<link rel="stylesheet" href="/video-js.8.17.2.css" />

<link href="/mediaplayer.css" rel="stylesheet" crossorigin="anonymous">

<!-- how will we handle appending to the current playlist?! -->
<!-- tracklist: for album, songqueue: for playback -->

<script>
  "use strict";
var playerSetup = false;
var playerPlaying = false;
var tracklist;
var songqueue;
var fetching;
var lastFetch;

function fetchTracklist() {
    const url = window.location.origin + window.location.pathname + ".json";
    console.log("Status", fetching, lastFetch );
    if( ! fetching ) {
      if( lastFetch !== url ) {
        fetching = url;
        const req = new Request(url);
        window.fetch(req)
        .then( (res) => {
              fetching = undefined;
              if( res.ok ) {
                  lastFetch = url;
                  res.json().then( (body) => {
                    console.log("Got a new playlist");
                    tracklist = body.slice(0);

                    // If the player is idle, set it up with the new playlist
                    console.log('Player is playing/at a track?!', playerPlaying);
                    if( !playerPlaying ) {
                        console.log("Setting up fetched tracklist");
                        const player = videojs('my-player');
                        console.log("My player is",player.el_);
                        player.playlist( tracklist );
                        if( ! songqueue) {
                            songqueue = tracklist.slice(0);
                            updatePlayqueue();
                        }
                    };
                  });
              } else {
                console.log("Error fetching playlist, ignored");
              }
        })
        .catch( (err) => {
            lastFetch = url;
            fetching = undefined;
        });
    } else {
      console.log("Already fetched", url);
    };
  } else {
    console.log("Already fetching something");
  }
}

function updateMediaSession(player) {
    // Somehow, player.playlist.currentItem() seems to get lost ?!
    console.log( "Current item", player.playlist.currentItem(), songqueue);
    let item = songqueue[  player.playlist.currentItem()];
    const artwork = [];

    if( item.poster ) {
        artwork.push( {
          src: item.poster,
          sizes: "400x400",
          type: "image/jpeg",
        } );
    }

    navigator.mediaSession.metadata = new MediaMetadata({
      album: item.album,
      artist: item.artist,
      artwork: artwork,
      title: item.title,
    });
}

function connectMediaSession(player, mediaSession) {
    const SEEK_TIME = 10; // seconds
    navigator.mediaSession.setActionHandler('seekbackward', (e) => {
        player.currentTime(player.currentTime() - SEEK_TIME);
    });
    navigator.mediaSession.setActionHandler('seekforward', (e) => {
        player.currentTime(player.currentTime() + SEEK_TIME);
    });

    navigator.mediaSession.setActionHandler('previoustrack', (e) => {
      player.playlist.previous();
    });
    navigator.mediaSession.setActionHandler('nexttrack', (e) => {
      console.log("mediaSession: next");
      player.playlist.next();
    });

    navigator.mediaSession.setActionHandler('play', (e) => {
      console.log("mediaSession: play");
      player.play();
    });
    navigator.mediaSession.setActionHandler('pause', (e) => {
      console.log("mediaSession: pause");
      player.pause();
    });
    navigator.mediaSession.setActionHandler('stop', (e) => {
      player.stop();
    });
}

function initPlayer() {
    const player = videojs('my-player');
    if(! playerSetup) {
        console.log("Fresh page here...");
        playerSetup = true;
        player.ready( () => {
            console.log("Connecting events");
            // Well, we don't want to necessarily change the playlist here!
            // player.playlist( tracklist );

            // Update our display
            player.on("playlistitem", (i) => {
              console.log("event: playlistitem");
              const track = player.playlist.currentIndex();

              // This is only for songs that are on the current page ...
              // Remove the "track-playing" class from all tracks
              const tracks = document.querySelectorAll(".track-playing");
              for (let elt of tracks) {
                  elt.classList.remove("track-playing");
              };

              const el = document.getElementById("track-"+track);
              if( el ) {
                el.classList.add("track-playing");
              };
            });

            // Our own implementation of autoadvance, since the one videojs has
            // in the playlist plugin does not seem to work?!
            player.on("ended", (e) => {
              console.log("player: ended");
              playerPlaying = false;
              if( player.playlist.nextIndex() >= 1 ) {
                player.playlist.next();
              };
            });
            player.on(["playing",'play'], (e) => {
              console.log("player: playing");
              playerPlaying = true;
              //console.log(e);
              //const player = videojs(e.target);

              if( ! songqueue) {
                  // User clicked the "play" button of the player
                  songqueue = tracklist.slice(0);
                  updatePlayqueue();
              }

            });

            // Consider hooking prev/next controls to the mediaSession item
            // as well, so things work from a lockscreen
            if ("mediaSession" in navigator) {
                player.on('loadstart', () => {
              console.log("event: loadstart -> mediaSession");
                    updateMediaSession(player);
                });
                connectMediaSession(player, navigator.mediaSession);
            };
      });
  } else {
      console.log("Already initialized");
  }
  console.log("initPlayer done");
}

let lastUrl;
function playTrack(track) {
  const player = videojs('my-player');
  console.log("Playing track",track);

  if( lastUrl != window.location.href ) {
      lastUrl = window.location.href;
      // Replace the current playlist with the current album
      songqueue = tracklist.slice(0);

      updatePlayqueue();
      console.log("Resetting playlist");
      player.playlist(songqueue);
      console.log(songqueue);
  };
  player.playlist.currentItem(track);
  player.ready( () => {
      console.log("Starting song", track);
      player.play();
      //player.ready();
  });
};

function updatePlayqueue() {
              console.log("Updating play queue div");

  // update the HTML of #playqueue with the new songqueue
  const playqueue = document.getElementById("playqueue");
  const newSongqueue = [];
  for ( let track of songqueue ) {
      let div = document.createElement("div");
      div.textContent = track.sources[0].src;
      newSongqueue.push( div );
  }

  playqueue.replaceChildren.apply( playqueue, newSongqueue); // boom
}

function hxInit() {
    console.log("Initializing HTMX");
    //initPlayer();
    fetchTracklist();
};

function htmlInit() {
    console.log("Initializing HTML");
    initPlayer();
    fetchTracklist();
};


/* This now gets called on _every_ page change, actually for every swapped-in element ... */
//htmx.onLoad( (elt) => {
//  console.log("Loaded element",elt);
//  hxInit();
//});
</script>

</head>
<body hx-ext="ws,morphdom-swap" ws-connect="/notify?version=<%= $$ %>"
  hx-boost="true"
   -hx-select="#container"
   -hx-target="#container"
   -hx-swap="outerHTML"
   onload="javascript:htmlInit()"
>
% use Encode 'decode';
% my $art = $tracks->image;
  <div id="container" hx-history-elt>
    <nav id="navigation" class="navbar navbar-expand-lg sticky-top">
      <a href="<%= url_with( "/media" )->query( offset => $offset ) %> ">List</a>
      <a href="<%= url_for("/media/diagnostics") %>">Diagnostics</a>
    </nav>
    <div class="grid-tracks">
% if( $art ) {
        <img id="cover" width="400px" height="400px" src="/media/image/<%= Mojo::File->new( $art->filename->native )->to_rel( $base ) %>" />
% }
        <div id="tracklist">
        % my $i = 0;
        % for my $track ($tracks->items->@*) {
        %     next if $tracks->image && ($track->{entry_id} == $tracks->image);
        %     next if $track->{mime_type} eq 'audio/x-mpegurl';
              <div class="track-play" id="track-<%= 0+$i %>" hx-on:click="playTrack(<%= $i++ %>);">
                <div class="track-title">
% my $visual = defined $track->{content}->{title}
%              ? decode('UTF-8', join " - ",  $track->{content}->{title}, $track->{content}->{artist})
%              : Mojo::File->new( $track->{filename}->native )->basename;
                  <%= $visual %>
                </div>
              </div>
        % }
        </div>
    </div>
  </div>
  <!--<div id="player">-->
  <!-- <a id="playlist_link" hx-preserve="true" href="#">???</a> -->
  <video
    hx-preserve="true"
    id="my-player"
    class="video-js"
    controls
    preload="auto"
    autoplay="false"
    type="audio/mpeg"
    % if( $art ) {
    data-setup='{"audioPosterMode":true, "poster":"/media/image/<%= Mojo::File->new( decode( 'UTF-8', $art->{filename}->native ) )->to_rel( $base ) %>"}'
    % }
    >
  <p class="vjs-no-js">
    To view this video please enable JavaScript
  </p>
  </video>
  <!--</div>-->
  <detail id="playqueueContainer" hx-preserve="true">
  <summary id="playqueue" hx-preserve="true">Queue
  </summary>
    <div>Track 1</div>
    <div>Track 2</div>
    <div>Track 3</div>
    <div>Track 4</div>
  </detail>
</body>
</html>
